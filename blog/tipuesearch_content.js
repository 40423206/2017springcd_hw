var tipuesearch = {"pages":[{"text":"NFU-MDE104B-40423206 倉儲: https://github.com/40423206/2017springcd_hw 簡報: https://40423206.github.io/2017springcd_hw 網誌: https://40423206.github.io/2017springcd_hw/blog/ Vimeo: https://vimeo.com/user63507357","tags":"misc","url":"./pages/about/","title":"About"},{"text":"Qusetion two ѲԓolveSpaceREVa Group.h.v=00000001 Group.type=5000 Group.name=#references Group.color=ff000000 Group.skipFirst=0 Group.predef.swapUV=0 Group.predef.negateU=0 Group.predef.negateV=0 Group.visible=1 Group.suppress=0 Group.relaxConstraints=0 Group.allowRedundant=0 Group.allDimsReference=0 Group.scale=1.00000000000000000000 Group.remap={ } AddGroup Group.h.v=00000002 Group.type=5001 Group.order=1 Group.name=sketch-in-plane Group.activeWorkplane.v=80020000 Group.color=ff000000 Group.subtype=6000 Group.skipFirst=0 Group.predef.q.w=1.00000000000000000000 Group.predef.origin.v=00010001 Group.predef.swapUV=0 Group.predef.negateU=0 Group.predef.negateV=0 Group.visible=1 Group.suppress=0 Group.relaxConstraints=0 Group.allowRedundant=0 Group.allDimsReference=0 Group.scale=1.00000000000000000000 Group.remap={ } AddGroup Group.h.v=00000003 Group.type=5300 Group.order=2 Group.name=W17 Group.color=00646464 Group.skipFirst=0 Group.meshCombine=2 Group.predef.swapUV=0 Group.predef.negateU=0 Group.predef.negateV=0 Group.visible=1 Group.suppress=0 Group.relaxConstraints=0 Group.allowRedundant=0 Group.allDimsReference=0 Group.scale=1.00000000000000000000 Group.remap={ 1 00010000 0 2 00010001 0 3 00010020 0 4 00020000 0 5 00020001 0 6 00020020 0 7 00030000 0 8 00030001 0 9 00030020 0 10 00040000 0 11 00040001 0 12 00040002 0 13 00050000 0 14 00050001 0 15 00050002 0 16 00060000 0 17 00060001 0 18 00060002 0 19 00070000 0 20 00070001 0 21 00070002 0 22 00080000 0 23 00080001 0 24 00080020 0 25 00080040 0 26 80020000 0 27 80020001 0 28 80020002 0 } Group.impFile=Y:\\tmp\\2017springcd_hw\\data\\W17\\W17.slvs Group.impFileRel=W17.slvs AddGroup Param.h.v.=00010010 AddParam Param.h.v.=00010011 AddParam Param.h.v.=00010012 AddParam Param.h.v.=00010020 Param.val=1.00000000000000000000 AddParam Param.h.v.=00010021 AddParam Param.h.v.=00010022 AddParam Param.h.v.=00010023 AddParam Param.h.v.=00020010 AddParam Param.h.v.=00020011 AddParam Param.h.v.=00020012 AddParam Param.h.v.=00020020 Param.val=0.50000000000000000000 AddParam Param.h.v.=00020021 Param.val=0.50000000000000000000 AddParam Param.h.v.=00020022 Param.val=0.50000000000000000000 AddParam Param.h.v.=00020023 Param.val=0.50000000000000000000 AddParam Param.h.v.=00030010 AddParam Param.h.v.=00030011 AddParam Param.h.v.=00030012 AddParam Param.h.v.=00030020 Param.val=0.50000000000000000000 AddParam Param.h.v.=00030021 Param.val=-0.50000000000000000000 AddParam Param.h.v.=00030022 Param.val=-0.50000000000000000000 AddParam Param.h.v.=00030023 Param.val=-0.50000000000000000000 AddParam Param.h.v.=00040010 Param.val=5.00000000000000000000 AddParam Param.h.v.=00040011 Param.val=-44.60000000000001600000 AddParam Param.h.v.=00040013 Param.val=5.00000000000000000000 AddParam Param.h.v.=00040014 Param.val=15.39999999999998300000 AddParam Param.h.v.=00050010 Param.val=-5.00000000000000000000 AddParam Param.h.v.=00050011 Param.val=-44.60000000000001600000 AddParam Param.h.v.=00050013 Param.val=5.00000000000000000000 AddParam Param.h.v.=00050014 Param.val=-44.60000000000001600000 AddParam Param.h.v.=00060010 Param.val=-5.00000000000000000000 AddParam Param.h.v.=00060011 Param.val=15.39999999999998300000 AddParam Param.h.v.=00060013 Param.val=-5.00000000000000000000 AddParam Param.h.v.=00060014 Param.val=-44.60000000000001600000 AddParam Param.h.v.=00070010 Param.val=5.00000000000000000000 AddParam Param.h.v.=00070011 Param.val=15.39999999999998300000 AddParam Param.h.v.=00070013 Param.val=-5.00000000000000000000 AddParam Param.h.v.=00070014 Param.val=15.39999999999998300000 AddParam Param.h.v.=00080010 Param.val=-0.20000000000000001000 AddParam Param.h.v.=00080011 Param.val=9.80000000000000070000 AddParam Param.h.v.=00080040 Param.val=2.50000000000000000000 AddParam Param.h.v.=80030000 Param.val=4.67047757197286200000 AddParam Param.h.v.=80030001 Param.val=1.29362308494918810000 AddParam Param.h.v.=80030002 Param.val=0.00000000000000030606 AddParam Param.h.v.=80030003 Param.val=0.96896198570174974000 AddParam Param.h.v.=80030004 Param.val=-0.00000000000000002592 AddParam Param.h.v.=80030005 Param.val=0.00000000000000003508 AddParam Param.h.v.=80030006 Param.val=0.24720976976026329000 AddParam Request.h.v=00000001 Request.type=100 Request.group.v=00000001 Request.construction=0 AddRequest Request.h.v=00000002 Request.type=100 Request.group.v=00000001 Request.construction=0 AddRequest Request.h.v=00000003 Request.type=100 Request.group.v=00000001 Request.construction=0 AddRequest Request.h.v=00000004 Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=00000005 Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=00000006 Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=00000007 Request.type=200 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Request.h.v=00000008 Request.type=400 Request.workplane.v=80020000 Request.group.v=00000002 Request.construction=0 AddRequest Entity.h.v=00010000 Entity.type=10000 Entity.construction=0 Entity.point[0].v=00010001 Entity.normal.v=00010020 Entity.actVisible=1 AddEntity Entity.h.v=00010001 Entity.type=2000 Entity.construction=0 Entity.actVisible=1 AddEntity Entity.h.v=00010020 Entity.type=3000 Entity.construction=0 Entity.point[0].v=00010001 Entity.actNormal.w=1.00000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=00020000 Entity.type=10000 Entity.construction=0 Entity.point[0].v=00020001 Entity.normal.v=00020020 Entity.actVisible=1 AddEntity Entity.h.v=00020001 Entity.type=2000 Entity.construction=0 Entity.actVisible=1 AddEntity Entity.h.v=00020020 Entity.type=3000 Entity.construction=0 Entity.point[0].v=00020001 Entity.actNormal.w=0.50000000000000000000 Entity.actNormal.vx=0.50000000000000000000 Entity.actNormal.vy=0.50000000000000000000 Entity.actNormal.vz=0.50000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=00030000 Entity.type=10000 Entity.construction=0 Entity.point[0].v=00030001 Entity.normal.v=00030020 Entity.actVisible=1 AddEntity Entity.h.v=00030001 Entity.type=2000 Entity.construction=0 Entity.actVisible=1 AddEntity Entity.h.v=00030020 Entity.type=3000 Entity.construction=0 Entity.point[0].v=00030001 Entity.actNormal.w=0.50000000000000000000 Entity.actNormal.vx=-0.50000000000000000000 Entity.actNormal.vy=-0.50000000000000000000 Entity.actNormal.vz=-0.50000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=00040000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=00040001 Entity.point[1].v=00040002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00040001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=5.00000000000000000000 Entity.actPoint.y=-44.60000000000001600000 Entity.actVisible=1 AddEntity Entity.h.v=00040002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=5.00000000000000000000 Entity.actPoint.y=15.39999999999998300000 Entity.actVisible=1 AddEntity Entity.h.v=00050000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=00050001 Entity.point[1].v=00050002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00050001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-5.00000000000000000000 Entity.actPoint.y=-44.60000000000001600000 Entity.actVisible=1 AddEntity Entity.h.v=00050002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=5.00000000000000000000 Entity.actPoint.y=-44.60000000000001600000 Entity.actVisible=1 AddEntity Entity.h.v=00060000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=00060001 Entity.point[1].v=00060002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00060001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-5.00000000000000000000 Entity.actPoint.y=15.39999999999998300000 Entity.actVisible=1 AddEntity Entity.h.v=00060002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-5.00000000000000000000 Entity.actPoint.y=-44.60000000000001600000 Entity.actVisible=1 AddEntity Entity.h.v=00070000 Entity.type=11000 Entity.construction=0 Entity.point[0].v=00070001 Entity.point[1].v=00070002 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00070001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=5.00000000000000000000 Entity.actPoint.y=15.39999999999998300000 Entity.actVisible=1 AddEntity Entity.h.v=00070002 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-5.00000000000000000000 Entity.actPoint.y=15.39999999999998300000 Entity.actVisible=1 AddEntity Entity.h.v=00080000 Entity.type=13000 Entity.construction=0 Entity.point[0].v=00080001 Entity.normal.v=00080020 Entity.distance.v=00080040 Entity.workplane.v=80020000 Entity.actVisible=1 AddEntity Entity.h.v=00080001 Entity.type=2001 Entity.construction=0 Entity.workplane.v=80020000 Entity.actPoint.x=-0.20000000000000001000 Entity.actPoint.y=9.80000000000000070000 Entity.actVisible=1 AddEntity Entity.h.v=00080020 Entity.type=3001 Entity.construction=0 Entity.point[0].v=00080001 Entity.workplane.v=80020000 Entity.actNormal.w=1.00000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=00080040 Entity.type=4000 Entity.construction=0 Entity.workplane.v=80020000 Entity.actDistance=2.50000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=80020000 Entity.type=10000 Entity.construction=0 Entity.point[0].v=80020002 Entity.normal.v=80020001 Entity.actVisible=0 AddEntity Entity.h.v=80020001 Entity.type=3010 Entity.construction=0 Entity.point[0].v=80020002 Entity.actNormal.w=1.00000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=80020002 Entity.type=2012 Entity.construction=0 Entity.actVisible=1 AddEntity Entity.h.v=80030002 Entity.type=2011 Entity.construction=0 Entity.actPoint.x=4.67047757197286200000 Entity.actPoint.y=1.29362308494918810000 Entity.actPoint.z=0.00000000000000030606 Entity.actVisible=1 AddEntity Entity.h.v=80030003 Entity.type=3011 Entity.construction=0 Entity.point[0].v=80030002 Entity.actNormal.w=0.96896198570174974000 Entity.actNormal.vx=-0.00000000000000002592 Entity.actNormal.vy=0.00000000000000003508 Entity.actNormal.vz=0.24720976976026329000 Entity.actVisible=1 AddEntity Entity.h.v=80030005 Entity.type=2011 Entity.construction=0 Entity.actPoint.x=4.67047757197286200000 Entity.actPoint.y=1.29362308494918810000 Entity.actPoint.z=0.00000000000000030606 Entity.actVisible=1 AddEntity Entity.h.v=80030006 Entity.type=3011 Entity.construction=0 Entity.point[0].v=80030005 Entity.actNormal.w=0.36087610797074321000 Entity.actNormal.vx=0.36087610797074321000 Entity.actNormal.vy=0.60808587773100653000 Entity.actNormal.vz=0.60808587773100653000 Entity.actVisible=1 AddEntity Entity.h.v=80030008 Entity.type=2011 Entity.construction=0 Entity.actPoint.x=4.67047757197286200000 Entity.actPoint.y=1.29362308494918810000 Entity.actPoint.z=0.00000000000000030606 Entity.actVisible=1 AddEntity Entity.h.v=80030009 Entity.type=3011 Entity.construction=0 Entity.point[0].v=80030008 Entity.actNormal.w=0.60808587773100653000 Entity.actNormal.vx=-0.36087610797074327000 Entity.actNormal.vy=-0.60808587773100653000 Entity.actNormal.vz=-0.36087610797074321000 Entity.actVisible=1 AddEntity Entity.h.v=8003000a Entity.type=11000 Entity.construction=0 Entity.point[0].v=8003000b Entity.point[1].v=8003000c Entity.actVisible=1 AddEntity Entity.h.v=8003000b Entity.type=2011 Entity.construction=0 Entity.actPoint.x=30.42603961907016700000 Entity.actPoint.y=-35.45975803350198400000 Entity.actPoint.z=0.00000000000000136845 Entity.actVisible=1 AddEntity Entity.h.v=8003000c Entity.type=2011 Entity.construction=0 Entity.actPoint.x=1.68161529205691270000 Entity.actPoint.y=17.20672153470733800000 Entity.actPoint.z=-0.00000000000000060431 Entity.actVisible=1 AddEntity Entity.h.v=8003000d Entity.type=11000 Entity.construction=0 Entity.point[0].v=8003000e Entity.point[1].v=8003000f Entity.actVisible=1 AddEntity Entity.h.v=8003000e Entity.type=2011 Entity.construction=0 Entity.actPoint.x=21.64829302436861300000 Entity.actPoint.y=-40.25049542133753300000 Entity.actPoint.z=0.00000000000000217650 Entity.actVisible=1 AddEntity Entity.h.v=8003000f Entity.type=2011 Entity.construction=0 Entity.actPoint.x=30.42603961907016700000 Entity.actPoint.y=-35.45975803350198400000 Entity.actPoint.z=0.00000000000000136845 Entity.actVisible=1 AddEntity Entity.h.v=80030010 Entity.type=11000 Entity.construction=0 Entity.point[0].v=80030011 Entity.point[1].v=80030012 Entity.actVisible=1 AddEntity Entity.h.v=80030011 Entity.type=2011 Entity.construction=0 Entity.actPoint.x=-7.09613130264464150000 Entity.actPoint.y=12.41598414687179500000 Entity.actPoint.z=0.00000000000000020374 Entity.actVisible=1 AddEntity Entity.h.v=80030012 Entity.type=2011 Entity.construction=0 Entity.actPoint.x=21.64829302436861300000 Entity.actPoint.y=-40.25049542133753300000 Entity.actPoint.z=0.00000000000000217650 Entity.actVisible=1 AddEntity Entity.h.v=80030013 Entity.type=11000 Entity.construction=0 Entity.point[0].v=80030014 Entity.point[1].v=80030015 Entity.actVisible=1 AddEntity Entity.h.v=80030014 Entity.type=2011 Entity.construction=0 Entity.actPoint.x=1.68161529205691270000 Entity.actPoint.y=17.20672153470733800000 Entity.actPoint.z=-0.00000000000000060431 Entity.actVisible=1 AddEntity Entity.h.v=80030015 Entity.type=2011 Entity.construction=0 Entity.actPoint.x=-7.09613130264464150000 Entity.actPoint.y=12.41598414687179500000 Entity.actPoint.z=0.00000000000000020374 Entity.actVisible=1 AddEntity Entity.h.v=80030016 Entity.type=13000 Entity.construction=0 Entity.point[0].v=80030017 Entity.normal.v=80030018 Entity.distance.v=80030019 Entity.actVisible=1 AddEntity Entity.h.v=80030017 Entity.type=2011 Entity.construction=0 Entity.actPoint.x=-0.20000000000000107000 Entity.actPoint.y=9.80000000000000070000 Entity.actPoint.z=0.00000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=80030018 Entity.type=3011 Entity.construction=0 Entity.point[0].v=80030017 Entity.actNormal.w=0.96896198570174974000 Entity.actNormal.vx=-0.00000000000000002592 Entity.actNormal.vy=0.00000000000000003508 Entity.actNormal.vz=0.24720976976026329000 Entity.actVisible=1 AddEntity Entity.h.v=80030019 Entity.type=4001 Entity.construction=0 Entity.actDistance=2.50000000000000000000 Entity.actVisible=1 AddEntity Entity.h.v=8003001b Entity.type=3011 Entity.construction=0 Entity.point[0].v=8003001c Entity.actNormal.w=0.96896198570174974000 Entity.actNormal.vx=-0.00000000000000002592 Entity.actNormal.vy=0.00000000000000003508 Entity.actNormal.vz=0.24720976976026329000 Entity.actVisible=1 AddEntity Entity.h.v=8003001c Entity.type=2011 Entity.construction=0 Entity.actPoint.x=4.67047757197286200000 Entity.actPoint.y=1.29362308494918810000 Entity.actPoint.z=0.00000000000000030606 Entity.actVisible=1 AddEntity Constraint.h.v=00000001 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00040001 Constraint.ptB.v=00050002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000002 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00050001 Constraint.ptB.v=00060002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000003 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00060001 Constraint.ptB.v=00070002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000004 Constraint.type=20 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.ptA.v=00070001 Constraint.ptB.v=00040002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000005 Constraint.type=81 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.entityA.v=00040000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000006 Constraint.type=80 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.entityA.v=00050000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000007 Constraint.type=81 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.entityA.v=00060000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000008 Constraint.type=80 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.entityA.v=00070000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=00000009 Constraint.type=31 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=5.00000000000000000000 Constraint.ptA.v=00040002 Constraint.entityA.v=00020000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=-0.40000000000000002000 Constraint.disp.offset.y=7.80000000000000160000 AddConstraint Constraint.h.v=0000000a Constraint.type=31 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=-5.00000000000000000000 Constraint.ptA.v=00060001 Constraint.entityA.v=00020000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=-1.99999999999999980000 Constraint.disp.offset.y=8.00000000000000000000 AddConstraint Constraint.h.v=0000000b Constraint.type=30 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=60.00000000000000000000 Constraint.ptA.v=00040001 Constraint.ptB.v=00040002 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 Constraint.disp.offset.x=10.00000000000000000000 AddConstraint Constraint.h.v=0000000c Constraint.type=90 Constraint.group.v=00000002 Constraint.workplane.v=80020000 Constraint.valA=5.00000000000000000000 Constraint.entityA.v=00080000 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=0000000d Constraint.type=20 Constraint.group.v=00000003 Constraint.ptA.v=00080001 Constraint.ptB.v=80030017 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=0000000e Constraint.type=122 Constraint.group.v=00000003 Constraint.entityA.v=80030009 Constraint.entityB.v=00010020 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Constraint.h.v=0000000f Constraint.type=122 Constraint.group.v=00000003 Constraint.entityA.v=80030006 Constraint.entityB.v=00010020 Constraint.other=0 Constraint.other2=0 Constraint.reference=0 AddConstraint Qusetion three","tags":"Course","url":"./Week 17.html","title":"W17 期末協同查驗與自評"},{"text":"從單一 2D 正齒輪繪圖到齒輪組嚙合 利用漸開線原理, 以 Brython 繪製單一正齒輪廓: window.onload=function(){ // 設定 data/py 為共用程式路徑 brython({debug:1, pythonpath:['./../data/py']}); } from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 定義節圓直徑 rp rp = 250 # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) canvas = doc['onegear1'] ctx = canvas.getContext(\"2d\") x = (canvas.width)/2 y = (canvas.height)/2 r = 0.8*(canvas.height/2) # 齒數 n = 36 # 壓力角 pa = 20 Spur(ctx).Gear(x, y, r, n, pa, \"black\") ctx.beginPath() ctx.fillStyle = \"#0000FF\" ctx.font = \"30px ScriptS\" ctx.fillText(\"40423206\", (canvas.width)/2-60, (canvas.height)/2+25) ctx.stroke() # 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容 from browser import document as doc # 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換 from browser import window import math # 主要用來取得畫布大小 canvas = doc[\"cango_gear\"] # 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx #ctx = canvas.getContext(\"2d\") cango = window.Cango.new # 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換 shapedefs = window.shapeDefs # 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形 # in CangoAnimation.js #interpolate1 = window.interpolate # Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件 cobj = window.Cobj.new creategeartooth = window.createGearTooth.new # 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id=\"cango_gear\" 的 canvas 上 cgo = cango(\"cango_gear\") ###################################### # 畫正齒輪輪廓 ##################################### # n 為齒數 n = 18 # pa 為壓力角 pa = 20 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth m = 0.5*canvas.width/36 # pr 為節圓半徑 pr = 36*m/2 # gear Pitch radius # generate gear data = creategeartooth(m, 36, pa) # Brython 程式中的 print 會將資料印在 Browser 的 console 區 #print(data) gearTooth = cobj(data, \"SHAPE\", { \"fillColor\":\"#ffaa00\", \"border\": True, \"strokeColor\": \"#606060\" }) gearTooth.rotate(180/36) # rotate gear 1/2 tooth to mesh # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中 gear = gearTooth.dup() # gear 為單一齒的輪廓資料 #cgo.render(gearTooth) # 利用單齒輪廓旋轉, 產生整個正齒輪外形 for i in range(1, n): # 將 gearTooth 中的資料複製到 newTooth newTooth = gearTooth.dup() # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear newTooth.rotate(180*i/n) # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號 gear.appendPath(newTooth, True) # trim move command = True # 建立軸孔 # add axle hole, hr 為 hole radius hr = 0.6*pr # diameter of gear shaft shaft = cobj(shapedefs.circle(hr), \"PATH\") shaft.revWinding() gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path cx = canvas.width/2 cy = canvas.height/2 gear.translate(cx, cy) # render 繪出靜態正齒輪輪廓 cgo.render(gear) from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 定義節圓直徑 rp rp = 250 m =2*rp/n # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx+rp+m, midy, midx-rp-m, midy) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(2): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) canvas = doc['onegear2'] ctx = canvas.getContext(\"2d\") x = (canvas.width)/2 y = (canvas.height)/2 r = 0.8*(canvas.height/2) # 齒數 n = 36 # 壓力角 pa = 20 Spur(ctx).Gear(x, y, r, n, pa, \"blue\")","tags":"Course","url":"./Week 15.html","title":"20170531 Week 15"},{"text":"從單一 2D 正齒輪繪圖到齒輪組嚙合 利用漸開線原理, 以 Brython 繪製單一正齒輪廓: window.onload=function(){ // 設定 data/py 為共用程式路徑 brython({debug:1, pythonpath:['./../data/py']}); } from browser import document as doc import math # deg 為角度轉為徑度的轉換因子 deg = math.pi/180. # 定義 Spur 類別 class Spur(object): def __init__(self, ctx): self.ctx = ctx def create_line(self, x1, y1, x2, y2, width=3, fill=\"red\"): self.ctx.beginPath() self.ctx.lineWidth = width self.ctx.moveTo(x1, y1) self.ctx.lineTo(x2, y2) self.ctx.strokeStyle = fill self.ctx.stroke() # # 定義一個繪正齒輪的繪圖函式 # midx 為齒輪圓心 x 座標 # midy 為齒輪圓心 y 座標 # rp 為節圓半徑, n 為齒數 # pa 為壓力角 (deg) # rot 為旋轉角 (deg) # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷 def Gear(self, midx, midy, rp, n=20, pa=20, color=\"black\"): # 齒輪漸開線分成 15 線段繪製 imax = 15 # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線 self.create_line(midx, midy, midx, midy-rp) # 畫出 rp 圓, 畫圓函式尚未定義 #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2) # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數 # 模數也就是齒冠大小 a=2*rp/n # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍 d=2.5*rp/n # ra 為齒輪的外圍半徑 ra=rp+a # 畫出 ra 圓, 畫圓函式尚未定義 #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1) # rb 則為齒輪的基圓半徑 # 基圓為漸開線長齒之基準圓 rb=rp*math.cos(pa*deg) # 畫出 rb 圓 (基圓), 畫圓函式尚未定義 #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1) # rd 為齒根圓半徑 rd=rp-d # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義 #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1) # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小 # 將圓弧分成 imax 段來繪製漸開線 # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: dr = (ra-rd)/imax else: dr=(ra-rb)/imax # tan(pa*deg)-pa*deg 為漸開線函數 sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg for j in range(n): ang=-2.*j*math.pi/n+sigma ang2=2.*j*math.pi/n+sigma lxd=midx+rd*math.sin(ang2-2.*math.pi/n) lyd=midy-rd*math.cos(ang2-2.*math.pi/n) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(alpha-ang) ypt=r*math.cos(alpha-ang) xd=rd*math.sin(-ang) yd=rd*math.cos(-ang) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): lfx=midx+xpt lfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # the line from last end of dedendum point to the recent # end of dedendum point # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標 # 下列為齒根圓上用來近似圓弧的直線 self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color) for i in range(imax+1): # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd if rd>rb: r=rd+i*dr else: r=rb+i*dr theta=math.sqrt((r*r)/(rb*rb)-1.) alpha=theta-math.atan(theta) xpt=r*math.sin(ang2-alpha) ypt=r*math.cos(ang2-alpha) xd=rd*math.sin(ang2) yd=rd*math.cos(ang2) # i=0 時, 繪線起點由齒根圓上的點, 作為起點 if(i==0): last_x = midx+xd last_y = midy-yd # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點 self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color) # 最後一點, 則為齒頂圓 if(i==imax): rfx=midx+xpt rfy=midy-ypt last_x = midx+xpt last_y = midy-ypt # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標 # 下列為齒頂圓上用來近似圓弧的直線 self.create_line(lfx,lfy,rfx,rfy,fill=color) canvas = doc['onegear'] ctx = canvas.getContext(\"2d\") x = (canvas.width)/2 y = (canvas.height)/2 r = 0.8*(canvas.height/2) # 齒數 n = 53 # 壓力角 pa = 20 Spur(ctx).Gear(x, y, r, n, pa, \"blue\") # 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容 from browser import document as doc # 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換 from browser import window import math # 主要用來取得畫布大小 canvas = doc[\"cango_gear\"] # 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx #ctx = canvas.getContext(\"2d\") cango = window.Cango.new # 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換 shapedefs = window.shapeDefs # 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形 # in CangoAnimation.js #interpolate1 = window.interpolate # Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件 cobj = window.Cobj.new creategeartooth = window.createGearTooth.new # 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id=\"cango_gear\" 的 canvas 上 cgo = cango(\"cango_gear\") ###################################### # 畫正齒輪輪廓 ##################################### # n 為齒數 n = 17 # pa 為壓力角 pa = 25 # m 為模數, 根據畫布的寬度, 計算適合的模數大小 # Module = mm of pitch diameter per tooth m = 0.8*canvas.width/n # pr 為節圓半徑 pr = n*m/2 # gear Pitch radius # generate gear data = creategeartooth(m, n, pa) # Brython 程式中的 print 會將資料印在 Browser 的 console 區 #print(data) gearTooth = cobj(data, \"SHAPE\", { \"fillColor\":\"#ddd0dd\", \"border\": True, \"strokeColor\": \"#606060\" }) gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中 gear = gearTooth.dup() # gear 為單一齒的輪廓資料 #cgo.render(gearTooth) # 利用單齒輪廓旋轉, 產生整個正齒輪外形 for i in range(1, n): # 將 gearTooth 中的資料複製到 newTooth newTooth = gearTooth.dup() # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear newTooth.rotate(360*i/n) # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號 gear.appendPath(newTooth, True) # trim move command = True # 建立軸孔 # add axle hole, hr 為 hole radius hr = 0.6*pr # diameter of gear shaft shaft = cobj(shapedefs.circle(hr), \"PATH\") shaft.revWinding() gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path cx = canvas.width/2 cy = canvas.height/2 gear.translate(cx, cy) # render 繪出靜態正齒輪輪廓 cgo.render(gear) 接著將設法處理兩種正齒輪嚙合的協同繪圖 (17t-11t-13t): 以及設法導出直線與圓弧倒圓角的繪圖流程","tags":"Course","url":"./Week 11.html","title":"20170503 Week 11"},{"text":"window.onload=function(){ brython(1); } from browser import document as doc from browser import html import math # 準備繪圖畫布 canvas = doc[\"fourbar\"] container1 = doc['container1'] ctx = canvas.getContext(\"2d\") fourbar_data = open(\"./../data/midterm2.csv\").read() fourbar_list = fourbar_data.splitlines() #container1 <= fourbar_list[0] # 以下可以利用 ctx 物件進行畫圖 # 先畫一條直線 ctx.beginPath() # 設定線的寬度為 1 個單位 ctx.lineWidth = 1 # 利用 transform 將 y 座標反轉, 且 offset canvas.height # (X scale, X skew, Y skew, Y scale, X offset, Y offset) # 配合圖形位置進行座標轉換 ctx.transform(1, 0, 0, -1, canvas.width/2+250, canvas.height/2+100) # 畫出 x 與 y 座標線 # 各座標值放大 4 倍 ratio = 4 ctx.moveTo(0, 0) ctx.lineTo(-30*ratio, 0) start_point = fourbar_list[0].split(\",\") ctx.moveTo(float(start_point[0])*ratio, float(start_point[1])*ratio) count = 0 for data in fourbar_list[1:]: point = data.split(\",\") #count = count + 1 #container1 <= str(count) + \":\" + point[0] + \",\" + point[1] #container1 <= html.BR() ctx.lineTo(float(point[0])*ratio, float(point[1])*ratio) # 設定顏色為藍色, 也可以使用 \"rgb(0, 0, 255)\" 字串設定顏色值 ctx.strokeStyle = \"blue\" # 實際執行畫線 ctx.stroke() ctx.closePath() 用 SolveSpace 畫四連桿 trace point 路徑 20170419_Week10_Trace Point from 40423206 on Vimeo . Fourbar Walker OnShape 20170419_Week10_Fourbar Walker OnShape from 40423206 on Vimeo .","tags":"Course","url":"./Week 8-10.html","title":"Inspection and self evaluation(Week 8-10)"},{"text":"Fourbar 安裝 base 20170329_Week6_Fourbar 安裝 base from 40423206 on Vimeo . Fourbar 運動模擬 在 V-rep 模擬 20170329_Week6_Fourbar 運動模擬on v-rep from 40423206 on Vimeo .","tags":"Course","url":"./Week 6.html","title":"20170329 Week 6"},{"text":"Fossil SCM 與 Stunnel 啟動整合 1. 更改 Start.bat 設定 REM tiny2017 主要針對初學 Python3 與 C 學員所建立 REM 近端使用 fossil 管理資料版本, 並且定時轉為 git 格式後上傳到 github @echo off REM 設定 y 硬碟代號與 data 目錄對應 set Disk=y subst %Disk%: \"data\" REM 設定 leo 相關對應 Home 位置 set HomePath=%Disk%:\\home set HomeDrive=%Disk%:\\home set Home=%Disk%:\\home REM 將系統 Python 程式的 io 設為 utf-8 set PYTHONIOENCODING=\"utf-8\" REM 將後續的指令執行, 以 %Disk% 為主 %Disk%: REM 設定 PYTHONPATH set PYTHONPATH=%Disk%:\\python-3.5.3-embed-amd64 REM 設定 Leo 所用的編輯器 set LEO_EDITOR=%Disk%:\\wscite\\SciTE.exe REM for fossil https 連線設定 set HTTPS=on REM 指令搜尋路徑設定 set path1=%PATH%;%Disk%:;%Disk%:\\python-3.5.3-embed-amd64;%Disk%:\\git\\bin;%Disk%:\\stunnel\\bin;%Disk%:\\sqlite-tools;%Disk%:\\python-3.5.3-embed-amd64\\Scripts;%Disk%:\\portablegit\\bin; set path2=c:\\Windows\\Microsoft.NET\\Framework\\v3.5;%Disk%:\\python-3.5.3-embed-amd64\\Lib\\site-packages; set path3=\"C:\\Program Files (x86)\\Google\\Chrome\\Application\" path=%path%;%path1%;%path2%;%path3% start /MIN %Disk%:\\wscite\\SciTE.exe start /MIN cmd.exe start /MIN cmd.exe start /MIN cmd.exe REM 啟動 Leo 編輯器 REM %Disk%:\\Miniconda3\\python.exe %Disk%:\\apps\\launchLeo.py REM 啟動 stunnel start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\\tmp\\fossil_repo\\2017springcd_bg1.fpssil REM 取得電腦 IP, 然後設定 %Disk%:/stunnel/config/stunnel.conf for /f \"delims=[] tokens=2\" %%a in ('ping -4 -n 1 %ComputerName% &#94;| findstr [') do set NetworkIP=%%a REM echo Network IP: %NetworkIP% REM Saved in %Disk%:\\stunnel\\config\\stunnel.conf @echo off REM 建立 stunnel.conf @echo [https] > %Disk%:\\stunnel\\config\\stunnel.conf REM 附加資料 @echo accept = %NetworkIP%:443 >> %Disk%:\\stunnel\\config\\stunnel.conf @echo connect = 127.0.0.1:8080 >> %Disk%:\\stunnel\\config\\stunnel.conf @echo TIMEOUTclose = 0 >> %Disk%:\\stunnel\\config\\stunnel.conf @echo cert = %Disk%:\\stunnel\\config\\localhost.crt >> %Disk%:\\stunnel\\config\\stunnel.conf @echo key = %Disk%:\\stunnel\\config\\localhost.key >> %Disk%:\\stunnel\\config\\stunnel.conf REM 啟動 stunnel start /MIN stunnel.exe REM 以 chrome 連線到 https://%NetworkIP%:443 chrome https://%NetworkIP% https://mde2a2.kmol.info/cdbg1 Exit 2. 檢查是否有相對應的 fossil 檔案 start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\\tmp\\fossil_repo\\2017springcd_bg1.fpssil 3. 自己額外在最後一行, 新增一個小組 fpssil 網址 https://mde2a2.kmol.info/cdbg1 建立與 project name 同名的首頁 wiki https://mde2a2.kmol.info/cdbg1 從 SolveSpace 匯出 onebar 並在 V-rep 加入馬達 SolveSpacec 匯出: 20170322_Week5_SolveSpace 匯入 V-rep from 40423206 on Vimeo . V-rep 加入馬達: 20170322_Week5_V-rep 加入馬達 from 40423206 on Vimeo .","tags":"Course","url":"./Week 5.html","title":"20170322 Week 5"},{"text":"建立各組協同主機 2017springcd_bg1: https://mde2a2.kmol.info/cdbg1 單桿機構","tags":"Course","url":"./Week 4.html","title":"20170315 Week 4"},{"text":"HyperWorks 14.0 Student Edition Student Edition: Download Now! Fourbar Link_30: SolveSpace Onshape 尺寸圖 Link_50: SolveSpace Onshape 尺寸圖 Link_60: SolveSpace Onshape 尺寸圖 Fourbar組裝: SolveSpace Onshape Fossil 1. 更改Start.bat設定 REM tiny2017 主要針對初學 Python3 與 C 學員所建立 REM 近端使用 fossil 管理資料版本, 並且定時轉為 git 格式後上傳到 github @echo off REM 設定 y 硬碟代號與 data 目錄對應 set Disk=y subst %Disk%: \"data\" REM 設定 leo 相關對應 Home 位置 set HomePath=%Disk%:\\home set HomeDrive=%Disk%:\\home set Home=%Disk%:\\home REM 將系統 Python 程式的 io 設為 utf-8 set PYTHONIOENCODING=\"utf-8\" REM 將後續的指令執行, 以 %Disk% 為主 %Disk%: REM 設定 PYTHONPATH set PYTHONPATH=%Disk%:\\python-3.5.3-embed-amd64 REM 設定 Leo 所用的編輯器 set LEO_EDITOR=%Disk%:\\wscite\\SciTE.exe REM for fossil https 連線設定 set HTTPS=on REM 指令搜尋路徑設定 set path1=%PATH%;%Disk%:;%Disk%:\\python-3.5.3-embed-amd64;%Disk%:\\git\\bin;%Disk%:\\stunnel\\bin;%Disk%:\\sqlite-tools;%Disk%:\\python-3.5.3-embed-amd64\\Scripts;%Disk%:\\portablegit\\bin; set path2=c:\\Windows\\Microsoft.NET\\Framework\\v3.5;%Disk%:\\python-3.5.3-embed-amd64\\Lib\\site-packages; path=%path%;%path1%;%path2% start /MIN %Disk%:\\wscite\\SciTE.exe start /MIN cmd.exe start /MIN cmd.exe start /MIN cmd.exe REM 啟動 Leo 編輯器 REM %Disk%:\\Miniconda3\\python.exe %Disk%:\\apps\\launchLeo.py REM 啟動 stunnel start /MIN fossil.exe server -P 127.0.0.1:8080 %Disk%:\\tmp\\fossil_repo\\2017springcd_hw.fpssil REM 取得電腦 IP, 然後設定 %Disk%:/stunnel/config/stunnel.conf for /f \"delims=[] tokens=2\" %%a in ('ping -4 -n 1 %ComputerName% &#94;| findstr [') do set NetworkIP=%%a REM echo Network IP: %NetworkIP% REM Saved in %Disk%:\\stunnel\\config\\stunnel.conf @echo off REM 建立 stunnel.conf @echo [https] > %Disk%:\\stunnel\\config\\stunnel.conf REM 附加資料 @echo accept = %NetworkIP%:443 >> %Disk%:\\stunnel\\config\\stunnel.conf @echo connect = 127.0.0.1:8080 >> %Disk%:\\stunnel\\config\\stunnel.conf @echo TIMEOUTclose = 0 >> %Disk%:\\stunnel\\config\\stunnel.conf @echo cert = %Disk%:\\stunnel\\config\\localhost.crt >> %Disk%:\\stunnel\\config\\stunnel.conf @echo key = %Disk%:\\stunnel\\config\\localhost.key >> %Disk%:\\stunnel\\config\\stunnel.conf REM 啟動 stunnel start /MIN stunnel.exe Exit 2. 在tmp裏的fossil_repo目錄執行指令 fossil init 2017springcd_hw.fpssil 3. 查詢IP ipconfig /all 4. 確認是否有用Poxy, 若有則需要將自己的IP設為例外 5. 使用瀏覽器輸入網址 https:// 電腦IPv4的IP","tags":"Course","url":"./Week 3.html","title":"20170308 Week 3"},{"text":"分組座位原始碼 #import os adata = open(\"w2b_cadlab.txt\", encoding=\"utf-8\").read() #讀取w2b_cadlab.txt 檔案,讓裡面的內容成為資料, 因為檔案裡有中文, 所以設定encoding 使用utf-8 的編驛碼 rdata = open(\"w2b_registered.txt\", encoding=\"utf-8\").read().splitlines() #print(adata) #用print 先檢查資料是否是我們需要的 alist = adata.splitlines() #利用splitlines 的方法把資料隔開, 就可以得到一個特定的數列 #print(alist[2]) n = 0 row = 0 final_list = [] w2_list = [] for stud_num in alist[2:]: #從第2列開始, 因為第0列和第1列都不是我們要的 row = row + 1 blist = stud_num.split(\"\\t\") #print(blist) column = 0 #為了避免序號連續, 利用column = 0 將順序重製, 因為每一列算完之後要換下一列重新開始 for i in range(len(blist)): column = column + 1 if blist[i] != \"\": #print(blist[i]) clist = blist[i].split(\"_\") stud_data = clist[0]+\"_\"+clist[1]+\"_\"+str(row)+\"_\"+str(column) final_list.append(stud_data) w2_list.append(clist[1]) n = n +1 # 根據數列前導字串排序, 目的在建立分組數列 group_list = sorted(final_list) print(\"分組名單:\") for i in range(len(group_list)): print(group_list[i]) print(\"座位列表:\") for i in range(len(final_list)): print(final_list[i]) for i in range(len(rdata)): if rdata[i] not in w2_list: print(\"缺席學生:\", rdata[i]) print(\"學生總數:\", n) #print(os.environ) Fourbar 利用Solvespace 畫出簡單的四連桿機構, 觀察該機構的運動方式, 也可以匯出到V-rep 進行動態模擬 20170304_Week2_fourbar from 40423206 on Vimeo .","tags":"Course","url":"./Week 2.html","title":"20170301 Week 2"},{"text":"修改stunnel.conf的IP設定 20170222_Week1_设定ip from 40423206 on Vimeo .","tags":"Course","url":"./Week 1.html","title":"20170222 Week 1"}]};